{"version":3,"sources":["../../bin/www.js"],"names":["debug","require","normalizePort","val","port","parseInt","isNaN","onError","error","syscall","bind","code","console","process","exit","onListening","addr","server","address","env","PORT","config","app","set","http","createServer","listen","on"],"mappings":"AAAA;;AAEA;;;;AAIA;;;;AACA;;;;AAGA;;;;;;AADA,IAAIA,QAAQC,QAAQ,OAAR,EAAiB,cAAjB,CAAZ;;;AAGA;;;;AAIA,IAAMC,gBAAgB,SAAhBA,aAAgB,CAACC,GAAD,EAAS;AAC3B,QAAMC,OAAOC,SAASF,GAAT,EAAc,EAAd,CAAb;AACA,QAAIG,MAAMF,IAAN,CAAJ,EAAiB;AACb;AACA,eAAOD,GAAP;AACH;AACD,QAAIC,QAAQ,CAAZ,EAAe;AACX;AACA,eAAOA,IAAP;AACH;AACD,WAAO,KAAP;AACH,CAXD;;AAaA;;;;AAIA,IAAMG,UAAU,SAAVA,OAAU,CAACC,KAAD,EAAW;AACvB,QAAIA,MAAMC,OAAN,KAAkB,QAAtB,EAAgC;AAC5B,cAAMD,KAAN;AACH;AACD,QAAIE,OAAO,OAAON,IAAP,KAAgB,QAAhB,GACL,UAAUA,IADL,GAEL,UAAUA,IAFhB;AAGA;AACA,YAAQI,MAAMG,IAAd;AACI,aAAK,QAAL;AACIC,oBAAQJ,KAAR,CAAcE,OAAO,+BAArB;AACAG,oBAAQC,IAAR,CAAa,CAAb;AACA;AACJ,aAAK,YAAL;AACIF,oBAAQJ,KAAR,CAAcE,OAAO,oBAArB;AACAG,oBAAQC,IAAR,CAAa,CAAb;AACA;AACJ;AACI,kBAAMN,KAAN;AAVR;AAYH,CApBD;;AAsBA;;;;AAIA,IAAMO,cAAc,SAAdA,WAAc,GAAM;AACtB,QAAMC,OAAOC,OAAOC,OAAP,EAAb;AACA,QAAMR,OAAO,OAAOM,IAAP,KAAgB,QAAhB,GACP,UAAUA,IADH,GAEP,UAAUA,KAAKZ,IAFrB;AAGAJ,UAAM,kBAAkBU,IAAxB;AACH,CAND;;AAQA;;;;AAIA,IAAMN,OAAOF,cAAcW,QAAQM,GAAR,CAAYC,IAAZ,IAAoBC,iBAAOjB,IAAP,CAAYa,MAA9C,CAAb;AACAK,cAAIC,GAAJ,CAAQ,MAAR,EAAgBnB,IAAhB;;AAEA;;;;AAIA,IAAMa,SAASO,eAAKC,YAAL,CAAkBH,aAAlB,CAAf;;AAEA;;;;AAIAL,OAAOS,MAAP,CAActB,IAAd;AACAa,OAAOU,EAAP,CAAU,OAAV,EAAmBpB,OAAnB;AACAU,OAAOU,EAAP,CAAU,WAAV,EAAuBZ,WAAvB","file":"www.js","sourcesContent":["'use strict';\n\n/**\n * Module dependencies.\n */\n\nimport app from '../app';\nimport config from '../config';\n\nlet debug = require('debug')('loris:server');\nimport http from 'http';\n\n/**\n * Normalize a port into a number, string, or false.\n */\n\nconst normalizePort = (val) => {\n    const port = parseInt(val, 10);\n    if (isNaN(port)) {\n        // named pipe\n        return val;\n    }\n    if (port >= 0) {\n        // port number\n        return port;\n    }\n    return false;\n};\n\n/**\n * Event listener for HTTP server \"error\" event.\n */\n\nconst onError = (error) => {\n    if (error.syscall !== 'listen') {\n        throw error;\n    }\n    let bind = typeof port === 'string'\n        ? 'Pipe ' + port\n        : 'Port ' + port;\n    // handle specific listen errors with friendly messages\n    switch (error.code) {\n        case 'EACCES':\n            console.error(bind + ' requires elevated privileges');\n            process.exit(1);\n            break;\n        case 'EADDRINUSE':\n            console.error(bind + ' is already in use');\n            process.exit(1);\n            break;\n        default:\n            throw error;\n    }\n};\n\n/**\n * Event listener for HTTP server \"listening\" event.\n */\n\nconst onListening = () => {\n    const addr = server.address();\n    const bind = typeof addr === 'string'\n        ? 'pipe ' + addr\n        : 'port ' + addr.port;\n    debug('Listening on ' + bind);\n};\n\n/**\n * Get port from environment and store in Express.\n */\n\nconst port = normalizePort(process.env.PORT || config.port.server);\napp.set('port', port);\n\n/**\n * Create HTTP server.\n */\n\nconst server = http.createServer(app);\n\n/**\n * Listen on provided port, on all network interfaces.\n */\n\nserver.listen(port);\nserver.on('error', onError);\nserver.on('listening', onListening);"]}