{"version":3,"sources":["../app.js"],"names":["MongoStore","require","Session","app","use","server","Server","io","listen","config","port","socket","express","json","urlencoded","extended","session","secret","security","cookie","clear_interval","maxAge","resave","saveUninitialized","store","url","database","mongodb","deployment","development","ttl","autoSave","indexRouter","usersRouter","req","res","next","err","locals","message","error","get","status","on","console","log","client","socketHandler","user","module","exports"],"mappings":"AAAA;;AAEA;;;;AACA;;;;AAEA;;;;AAEA;;;;AAGA;;;;AACA;;;;AACA;;;;AAEA;;;;AAEA;;;;AACA;;;;;;AATA,IAAMA,aAAaC,QAAQ,eAAR,EAAyBC,wBAAzB,CAAnB;;AAWA,IAAMC,MAAM,wBAAZ;AACAA,IAAIC,GAAJ,CAAQ,uBAAR;;AAEA,IAAMC,SAASJ,QAAQ,MAAR,EAAgBK,MAAhB,CAAuBH,GAAvB,CAAf;AACA,IAAMI,KAAKN,QAAQ,WAAR,EAAqBI,MAArB,CAAX,C,CAAyC;AACzCA,OAAOG,MAAP,CAAcC,iBAAOC,IAAP,CAAYC,MAA1B,E,CAAmC;;AAEnCR,IAAIC,GAAJ,CAAQ,sBAAO,KAAP,CAAR;AACAD,IAAIC,GAAJ,CAAQQ,kBAAQC,IAAR,EAAR;AACAV,IAAIC,GAAJ,CAAQQ,kBAAQE,UAAR,CAAmB,EAAEC,UAAU,KAAZ,EAAnB,CAAR;AACAZ,IAAIC,GAAJ,CAAQ,6BAAR;;AAEA;AACA,IAAIY,UAAU,8BAAQ;AAClBC,YAAQR,iBAAOS,QAAP,CAAgBC,MAAhB,CAAuBF,MADb;AAElBG,oBAAgB,IAFE;AAGlBD,YAAQ,EAAE;AACNE,gBAAQZ,iBAAOS,QAAP,CAAgBC,MAAhB,CAAuBE;AAD3B,KAHU;AAMlBC,YAAQ,IANU;AAOlBC,uBAAmB,IAPD;AAQlBC,WAAO,IAAIxB,UAAJ,CAAe;AAClByB,aAAKhB,iBAAOiB,QAAP,CAAgBC,OAAhB,CAAwBvB,GAAxB,KAAgC,YAAhC,GACCK,iBAAOiB,QAAP,CAAgBC,OAAhB,CAAwBC,UADzB,GAECnB,iBAAOiB,QAAP,CAAgBC,OAAhB,CAAwBE,WAHZ;AAIlBC,aAAK,IAAI,EAAJ,GAAS,EAAT,GAAc,EAJD,CAII;AAJJ,KAAf;AARW,CAAR,CAAd;;AAgBA3B,IAAIC,GAAJ,CAAQY,OAAR;;AAEAT,GAAGH,GAAH,CAAO,6BAAIY,OAAJ,EAAa;AAChBe,cAAU;AADM,CAAb,CAAP;;AAKA5B,IAAIC,GAAJ,CAAQ,GAAR,EAAa4B,eAAb;AACA7B,IAAIC,GAAJ,CAAQ,QAAR,EAAkB6B,eAAlB;;AAEA;AACA9B,IAAIC,GAAJ,CAAQ,UAAC8B,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AACxBA,SAAK,0BAAY,GAAZ,CAAL;AACH,CAFD;;AAIA;AACAjC,IAAIC,GAAJ,CAAQ,UAACiC,GAAD,EAAMH,GAAN,EAAWC,GAAX,EAAgBC,IAAhB,EAAyB;AAC7B;AACAD,QAAIG,MAAJ,CAAWC,OAAX,GAAqBF,IAAIE,OAAzB;AACAJ,QAAIG,MAAJ,CAAWE,KAAX,GAAmBN,IAAI/B,GAAJ,CAAQsC,GAAR,CAAY,KAAZ,MAAuB,aAAvB,GAAuCJ,GAAvC,GAA6C,EAAhE;;AAEA;AACAF,QAAIO,MAAJ,CAAWL,IAAIK,MAAJ,IAAc,GAAzB;AACH,CAPD;;AASA;AACAnC,GAAGoC,EAAH,CAAM,YAAN,EAAoB,kBAAU;AAC1BC,YAAQC,GAAR,CAAY,oCAAoC,IAAhD;;AAEA,QAAMC,SAAS7C,QAAQ,2BAAR,CAAf;AACA6C,WAAOC,aAAP,CAAqBpC,MAArB;AACA;;;;;AAKA,QAAMqC,OAAO/C,QAAQ,uBAAR,CAAb;AACA+C,SAAKD,aAAL,CAAmBpC,MAAnB;AACA;;;;;;;;AASH,CArBD;;AAuBAsC,OAAOC,OAAP,GAAiB/C,GAAjB","file":"app.js","sourcesContent":["'use strict';\n\nimport helmet from 'helmet';\nimport express from 'express';\n\nimport config from './config';\n\nimport Session from 'express-session';\nconst MongoStore = require('connect-mongo')(Session);\n\nimport logger from 'morgan';\nimport createError from 'http-errors';\nimport cookieParser from 'cookie-parser';\n\nimport ios from 'express-socket.io-session';\n\nimport indexRouter from './routes/index';\nimport usersRouter from './routes/users';\n\nconst app = express();\napp.use(helmet());\n\nconst server = require('http').Server(app);\nconst io = require('socket.io')(server); // add socket.io 'websockets'.\nserver.listen(config.port.socket); // listen for websockets on port 6660\n\napp.use(logger('dev'));\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\napp.use(cookieParser());\n\n//-| session |--------|\nlet session = Session({\n    secret: config.security.cookie.secret,\n    clear_interval: 3600,\n    cookie: { // cookie stuff.\n        maxAge: config.security.cookie.maxAge\n    },\n    resave: true,\n    saveUninitialized: true,\n    store: new MongoStore({\n        url: config.database.mongodb.use === 'deployment'\n            ? config.database.mongodb.deployment\n            : config.database.mongodb.development,\n        ttl: 7 * 24 * 60 * 60 // 7 days.\n    })\n});\n\napp.use(session);\n\nio.use(ios(session, {\n    autoSave: true\n}));\n\n\napp.use('/', indexRouter);\napp.use('/users', usersRouter);\n\n// catch 404 and forward to error handler\napp.use((req, res, next) => {\n    next(createError(404));\n});\n\n// error handler\napp.use((err, req, res, next) => {\n    // set locals, only providing error in development\n    res.locals.message = err.message;\n    res.locals.error = req.app.get('env') === 'development' ? err : {};\n\n    // render the error page\n    res.status(err.status || 500);\n});\n\n//-| Socket.io Commands |-- -- -- -- -- -- -- -- -- [SEPARATOR] -|\nio.on('connection', socket => {\n    console.log('[*] Websocket connection found!' + '\\n');\n\n    const client = require('./libraries/client/client');\n    client.socketHandler(socket);\n    /* socketHandler [events] list.\n     *   'client_identity' 'client_register' 'disconnect' 'message' 'error'\n     *   'client_ready' 'client_error'\n     */\n\n    const user = require('./libraries/user/user');\n    user.socketHandler(socket);\n    /* socketHandler [events] list.\n     *   'login'\n     *   'logout'\n     *   'register'\n     *   'get_avatar'\n     *   'update_avatar'\n     *   'create_lyrics_transcription_request'\n     */\n\n});\n\nmodule.exports = app;\n"]}